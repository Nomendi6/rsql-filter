package com.nomendi6.rsql.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductTypeAllPropertiesEquals(ProductType expected, ProductType actual) {
        assertProductTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertProductTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductTypeAllUpdatablePropertiesEquals(ProductType expected, ProductType actual) {
        assertProductTypeUpdatableFieldsEquals(expected, actual);
        assertProductTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductTypeAutoGeneratedPropertiesEquals(ProductType expected, ProductType actual) {
        assertThat(actual)
            .as("Verify ProductType auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductTypeUpdatableFieldsEquals(ProductType expected, ProductType actual) {
        assertThat(actual)
            .as("Verify ProductType relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getSeq()).as("check seq").isEqualTo(expected.getSeq()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getValidFrom()).as("check validFrom").isEqualTo(expected.getValidFrom()))
            .satisfies(a -> assertThat(a.getValidUntil()).as("check validUntil").isEqualTo(expected.getValidUntil()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductTypeUpdatableRelationshipsEquals(ProductType expected, ProductType actual) {
        // empty method
    }
}
