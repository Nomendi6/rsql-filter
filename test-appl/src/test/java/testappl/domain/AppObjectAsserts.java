package testappl.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppObjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppObjectAllPropertiesEquals(AppObject expected, AppObject actual) {
        assertAppObjectAutoGeneratedPropertiesEquals(expected, actual);
        assertAppObjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppObjectAllUpdatablePropertiesEquals(AppObject expected, AppObject actual) {
        assertAppObjectUpdatableFieldsEquals(expected, actual);
        assertAppObjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppObjectAutoGeneratedPropertiesEquals(AppObject expected, AppObject actual) {
        assertThat(actual)
            .as("Verify AppObject auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppObjectUpdatableFieldsEquals(AppObject expected, AppObject actual) {
        assertThat(actual)
            .as("Verify AppObject relevant properties")
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getObjectType()).as("check objectType").isEqualTo(expected.getObjectType()))
            .satisfies(a -> assertThat(a.getLastChange()).as("check lastChange").isEqualTo(expected.getLastChange()))
            .satisfies(a -> assertThat(a.getSeq()).as("check seq").isEqualTo(expected.getSeq()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getQuantity()).as("check quantity").isEqualTo(expected.getQuantity()))
            .satisfies(a -> assertThat(a.getValidFrom()).as("check validFrom").isEqualTo(expected.getValidFrom()))
            .satisfies(a -> assertThat(a.getValidUntil()).as("check validUntil").isEqualTo(expected.getValidUntil()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppObjectUpdatableRelationshipsEquals(AppObject expected, AppObject actual) {
        assertThat(actual)
            .as("Verify AppObject relationships")
            .satisfies(a -> assertThat(a.getParent()).as("check parent").isEqualTo(expected.getParent()));
    }
}
